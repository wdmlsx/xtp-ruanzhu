syntax = "proto3";
package api; 

option java_package = "org.onosproject.protocol.sptn.proto.api";

message tbl_acl_key
{
	string name = 1;
}

enum acl_type
{
	ACL_TYPE_MAC  	= 0;
	ACL_TYPE_IP   	= 1;
	ACL_TYPE_IP6	= 2;
	ACL_TYPE_EXIP 	= 3;
	ACL_TYPE_EXIP6 	= 4;
	ACL_TYPE_MPLS 	= 5;
	ACL_TYPE_EXMPLS = 6;
}

enum acl_action
{
	ACTION_DENY = 0;
	ACTION_PERMIT = 1;	 
}

enum macacl_l2type
{
	L2TYPE_ETH2 = 0;
	L2TYPE_SNAP = 1;
	L2TYPE_SAP = 2;
}

enum macacl_l2proto
{
	L2PROTO_ARP = 0;
	L2PROTO_RARP = 1;
	L2PROTO_ETH	= 2;
}

enum macacl_arp_op
{
	L2PROTO_ARP_NONE = 0;
	L2PROTO_ARP_REQ = 1;
	L2PROTO_ARP_REPLY = 2;
	L2PROTO_ARP_SENDERIP =3;
	L2PROTO_ARP_TARGETIP = 4;	
}

enum macacl_mac_type
{
	MAC_ANY = 0;
	MAC_HOST = 1;
	MAC_OTHER = 2;
}

message macacl_rule
{
	uint32 sequence_num 	= 1;
	macacl_mac_type	src_mac_type = 2;		
	bytes src_mac			= 3;
	bytes src_mac_mask 		= 4;
	macacl_mac_type	dst_mac_type = 5;
	bytes dst_mac			= 6;
	bytes dst_mac_mask		= 7;
	uint32 vlan_id			= 8;
	uint32 cos				= 9;
	uint32 inner_vlan_id	= 10;
	uint32 inner_cos		= 11;
	macacl_l2proto l2proto	= 12;	
	macacl_arp_op l2_arp_op = 13;
	ipaddr_type l2_arp_sip_type = 14;
	uint32 l2_arp_sip_v 		= 15;
	uint32 l2_arp_sip_m		= 16;
	ipaddr_type l2_arp_tip_type = 17;
	uint32 l2_arp_tip_v 		= 18;
	uint32 l2_arp_tip_m		= 19;	
	uint32 l2_eth_v 		= 21;
	uint32 l2_eth_m			= 22;
	macacl_l2type l2type		= 23;
	string time_range		= 24;	
	acl_action action		= 25;
	bool set				= 26;
}

enum ipaddr_type
{
	IP_ANY = 0;
	IP_HOST = 1;
	IP_OTHER = 2;
}

enum ipacl_type
{
	IPACL_NORMAL = 0;
	IPACL_TCP 	= 1;
	IPACL_UDP 	= 2;
	IPACL_ICMP 	= 3;
	IPACL_IGMP 	= 4;
}

enum ipacl_port_op
{
	IPACL_OP_EQ = 0;
	IPACL_OP_LT = 1;
	IPACL_OP_GT = 2;
	IPACL_OP_NEQ = 3;
	IPACL_OP_RANGE = 4;
}

enum ipacl_tcp_flag
{
	ESTABLISHED = 0;
	MATCH_ANY = 1;
	MATCH_ALL = 2;
}

enum ipacl_match
{
	MATCH_NONE = 0;
	MATCH_ACK = 1;
	MATCH_URG = 2;
	MATCH_FIN = 4;
	MATCH_PSH = 8;
	MATCH_RST = 16;
	MATCH_SYN = 32;
}

enum ipacl_fragments
{
	FRAGMENTS_NONE = 0;
	FRAGMENTS_FIRST = 1;
	FRAGMENTS_NONEORFIRST = 2;
	FRAGMENTS_SMALL = 3;
	FRAGMENTS_NONEFIRST = 4;
}

enum ipacl_igmptype
{ 
	IGMP_T_PRECEDENCE = 0;  /*temp, maybe change later*/
	IGMP_T_HOST_QUERY = 0x11;
	IGMP_T_HOST_REPORT = 0x12;
	IGMP_T_HOST_DVMRP = 0x13;
	IGMP_T_PIM = 0x14;
	IGMP_T_TRACE = 0x15;
	IGMP_T_V2_REPORT = 0x16;
	IGMP_T_V2_LEAVE = 0x17;
	IGMP_T_MTRACT = 0x1f;
	IGMP_T_MTRACT_RESPONSE = 0x1e;
	IGMP_T_V3_REPORT = 0x22;
}

message ipacl_rule
{
	uint32 sequence_num 	= 1;
	ipacl_type type 		= 2;
	uint32 extend_num		= 3;
	ipaddr_type src_ip_type = 4;
	uint32 src_ip			= 5;
	uint32 src_ip_mask		= 6;
	ipaddr_type dst_ip_type = 7;
	uint32 dst_ip			= 8;
	uint32 dst_ip_mask		= 9;
	ipacl_port_op src_port_op = 10;
	uint32 src_port			= 11;
	uint32 src_port2		= 12;
	ipacl_port_op dst_port_op = 13;
	uint32 dst_port			= 14;	
	uint32 dst_port2		= 15;	
	ipacl_tcp_flag tcp_flag	= 16;
	uint32 flag_macth		= 17;		//combination value of ipacl_match, eg MATCHALL_ACK | MATCHALL_URG
	uint32 icmp_type		= 18;
	uint32 icmp_code		= 19;
	ipacl_igmptype igmp_type = 20;
	uint32 ip_precedence	= 21;
	uint32 dscp				= 22;
	ipacl_fragments fragments = 23;
	bool routed_packet		= 24;
	bool options			= 25;
	string time_range		= 26;
	acl_action action 		= 27;
	bool set				= 28;	
}

message mplsacl_label
{
	uint32 label 	= 1;
	uint32 mask  	= 2;
	uint32 exp		= 3;
	uint32 ttl    	= 4;
	bool is_bottom  = 5;	//bottom label
}

message mplsacl_rule
{
	uint32 sequence_num 			= 1;
	repeated mplsacl_label label 	= 2;
	string time_range				= 3;
	acl_action action				= 4;
	bool set						= 5;
}

message tbl_acl
{
	tbl_acl_key key = 1;
	acl_type type = 2;
	repeated macacl_rule mac_rule = 3;
	repeated ipacl_rule ip_rule = 4;
	repeated mplsacl_rule mpls_rule = 5;
	string remark = 6;	
}

message response_acl
{
	int32 return_code 		= 1;
	string return_string 	= 2;
	tbl_acl data 			= 3;	
}

message getall_acl
{
	int32 return_code 			= 1;
	string return_string 		= 2;
	repeated tbl_acl data 	= 3;	
}

message notify_acl
{

}