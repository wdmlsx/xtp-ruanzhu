syntax = "proto3";
package api; 

option java_package = "org.onosproject.protocol.sptn.proto.api";

enum auth_type
{
	AUTH_TYPE0 	= 0;
	AUTH_TYPE1 	= 1;
	AUTH_TYPE_MD5 	= 2;
}

message tbl_ospf_key
{
	uint32 instance_id = 1;
}

enum ospf_protocol
{
	TYPE_CONNECTED = 0;
	TYPE_STATIC = 1;
	TYPE_BGP = 2;
	TYPE_RIP = 3;
}

enum metric_type
{
	METRIC_TYPE1 = 0;
	METRIC_TYPE2 = 1;
}

message ospf_area
{
	uint32 id = 1;
	auth_type auth_type = 2;
	uint32 default_cost = 3;
	bool stub = 4;
	bool stub_no_summary = 5;
}

message ospf_network
{
	uint32 network_prefix = 1;
	uint32 network_len = 2;
	uint32 area_id = 3;
	bool set = 4;
}

message ospf_redistribute
{
	ospf_protocol protocol   = 1;
	string route_map  	= 2;
	uint32 tag	   		= 3;
	uint32 metric	   	= 4;
	metric_type metric_type = 5;
}

message ospf_if
{
	string name = 1;	
	uint32 hello_interval = 2;	//1~65535
	uint32 network_type = 3;	//0:none 1:p2p 2:broadcast 3:nbma 4:p2mp
	uint32 cost = 4;
}

message tbl_ospf
{
	tbl_ospf_key key = 1;
	string vrf		 = 2;
	uint32 router_id = 3;
	uint32 distance = 4;
	uint32 default_metric = 5;
	uint32 ref_bandwidth = 6;
	repeated ospf_network network = 7;
	repeated ospf_area area = 8;
	repeated ospf_if oif = 9;
}

message response_ospf
{
	int32 return_code = 1;
	string return_string = 2;
	tbl_ospf data = 3;	
}

message getall_ospf
{
	int32 return_code = 1;
	string return_string = 2;
	repeated tbl_ospf data = 3;
}

message notify_ospf
{

}

